new AnnotationConfigApplicationContext
    this.beanFactory = new DefaultListableBeanFactory()
    // 注册6个beanDefinition
    this.reader = new AnnotatedBeanDefinitionReader(this);
        ConfigurationClassPostProcessor(最重要，解析@configuration这个注解)只有这个是beanFactoryPostProcessor，其他5个都是beanPostProcessor
        AutowiredAnnotationBeanPostProcessor
        RequiredAnnotationBeanPostProcessor
        CommonAnnotationBeanPostProcessor
        PersistenceAnnotationBeanPostProcessor
        EventListenerMethodProcessor
        DefaultEventListenerFactory
    this.scanner = new ClassPathBeanDefinitionScanner(this);
refresh
    prepareBeanFactory
        添加一个后置处理器ApplicationContextAwareProcessor
    invokeBeanFactoryPostProcessors
        // 注册
        PostProcessorRegistrationDelegate#invokeBeanFactoryPostProcessors(ConfigurableListableBeanFactory beanFactory, List<BeanFactoryPostProcessor> beanFactoryPostProcessors)
            invokeBeanDefinitionRegistryPostProcessors（BeanDefinitionRegistryPostProcessor继承beanFactoryPostProcessor，ConfigurationClassPostProcessor实现了BeanDefinitionRegistryPostProcessor）（首先递归处理所有的BeanDefinitionRegistryPostProcessor.postProcessBeanDefinitionRegistry，再处理BeanFactoryPostProcessor.postProcessBeanFactory）
                ConfigurationClassPostProcessor.postProcessBeanDefinitionRegistry
                    ConfigurationClassPostProcessor#processConfigBeanDefinitions（处理full Configuration（有@Configuration）和lite configuration（@Import\@Component\@ImportResource\@ComponentScan和@bean函数））
                        （lite @Bean mode ：当@Bean方法在没有使用@Configuration注解的类中声明时称之为lite @Bean mode，Full @Configuration：如果@Bean方法在使用@Configuration注解的类中声明时称之为Full @Configuration）
                        ConfigurationClassUtils#checkConfigurationClassCandidate
                        （@Import\@Component\@ImportResource\@ComponentScan和@bean函数都属于lite Configuration，都会放到configClass）
                        ConfigurationClassParser#parse（解析@Configuration）
                            ConfigurationClassParser#parse
                                ConfigurationClassParser#processConfigurationClass
                                    ConfigurationClassParser#doProcessConfigurationClass
                                        1. Process any @PropertySource annotations
                                        2. 处理@ComponentScan注解
                                        ComponentScanAnnotationParser#parse
                                            扫描出来所有@ComponentScan下的class，如果扫描出来的是@Configuration，则递归解析@Configuration，回到上面解析@Configuration人口）
                                            ClassPathBeanDefinitionScanner#doScan
                                                ClassPathScanningCandidateComponentProvider#findCandidateComponents
                                                    asm读取class文件，生成bd
                                                    ClassPathScanningCandidateComponentProvider#scanCandidateComponents
                                                    ClassPathBeanDefinitionScanner#postProcessBeanDefinition
                                                    AnnotationConfigUtils#processCommonDefinitionAnnotations
                                                    ClassPathBeanDefinitionScanner#registerBeanDefinition
                                        3. 处理@Import注解 
                                        ConfigurationClassParser#processImports
                                            处理@import注解（实现ImportSelector接口的类，普通类，实现ImportBeanDefinitionRegistrar的类，没有生成bd，只是将所有import的class放入configClasses）    
                                            ImportSelector.class
                                            ImportBeanDefinitionRegistrar.class
                                            normal class
                                            ConfigurationClassParser#processConfigurationClass（回到上面步骤）
                                        4. Process any @ImportResource annotations
                                        5. Process individual @Bean methods
                                        @bean也放入configurationClasses
                                        configurationClasses.addBeanMethod(new BeanMethod(methodMetadata, configClass));
                        import的类信息都放在parser.configurationClasses
                        this.configurationClasses.put(configClass, configClass);
                        将configClass生成bd
                        ConfigurationClassBeanDefinitionReader#loadBeanDefinitions                
                            ConfigurationClassBeanDefinitionReader#loadBeanDefinitionsForConfigurationClass
                                被标注import的bean注册
                                ConfigurationClassBeanDefinitionReader#registerBeanDefinitionForImportedConfigurationClass
                                ConfigurationClassBeanDefinitionReader#loadBeanDefinitionsForBeanMethod
                                ConfigurationClassBeanDefinitionReader#loadBeanDefinitionsFromImportedResources
                                ConfigurationClassBeanDefinitionReader#loadBeanDefinitionsFromRegistrars
        // postProcessBeanFactory
        PostProcessorRegistrationDelegate#invokeBeanFactoryPostProcessors(Collection<? extends BeanFactoryPostProcessor> postProcessors, ConfigurableListableBeanFactory beanFactory)
            xxxxPostProcessor.postProcessBeanFactory(ConfigurationClassPostProcessor#postProcessBeanFactory)
                // 将full configurationClasses即@configuration的类做了cglib代理，在原来的bd上修改beanClass
                ConfigurationClassPostProcessor#enhanceConfigurationClasses
                    beanDef.setBeanClass(enhancedClass)
                // 添加一个beanPostProcesor
                beanFactory.addBeanPostProcessor(new ImportAwareBeanPostProcessor(beanFactory));
    // bean实例化
    finishBeanFactoryInitialization
        DefaultListableBeanFactory#preInstantiateSingletons
            遍历所有beanNames
            // 合并bd，因为bd有继承功能，子bd需要合并父bd
            AbstractBeanFactory#getMergedLocalBeanDefinition
                AbstractBeanFactory#getBean(java.lang.String)
                    AbstractBeanFactory#doGetBean
                        DefaultSingletonBeanRegistry#getSingleton(java.lang.String)
                            // 用于已初始化bean和循环引用
                            DefaultSingletonBeanRegistry#getSingleton(java.lang.String, boolean)
                        DefaultSingletonBeanRegistry#getSingleton(java.lang.String, org.springframework.beans.factory.ObjectFactory<?>)
                            // 将bean加入正在创建的bean集合
                            DefaultSingletonBeanRegistry#beforeSingletonCreation
                            AbstractAutowireCapableBeanFactory#createBean(java.lang.String, org.springframework.beans.factory.support.RootBeanDefinition, java.lang.Object[])
                                AbstractAutowireCapableBeanFactory#doCreateBean
                                    AbstractAutowireCapableBeanFactory#createBeanInstance
                                        AbstractAutowireCapableBeanFactory#instantiateBean
                                            SimpleInstantiationStrategy#instantiate(org.springframework.beans.factory.support.RootBeanDefinition, java.lang.String, org.springframework.beans.factory.BeanFactory)
                                                BeanUtils#instantiateClass(java.lang.reflect.Constructor<T>, java.lang.Object...)
                                AbstractAutowireCapableBeanFactory#populateBean
                                // bean初始化
                                AbstractAutowireCapableBeanFactory#initializeBean(java.lang.String, java.lang.Object, org.springframework.beans.factory.support.RootBeanDefinition)
                                    AbstractAutowireCapableBeanFactory#invokeAwareMethods
                                    AbstractAutowireCapableBeanFactory#applyBeanPostProcessorsBeforeInitialization
                                    AbstractAutowireCapableBeanFactory#invokeInitMethods
                                    AbstractAutowireCapableBeanFactory#applyBeanPostProcessorsAfterInitialization
                                    AbstractAutowireCapableBeanFactory#invokeInitMethods
                                        ((InitializingBean) bean).afterPropertiesSet()
                                        invokeCustomInitMethod
                                // 如果earlySingletonExposure为true，循环依赖
                                DefaultSingletonBeanRegistry#getSingleton(java.lang.String, boolean)
                            // 去掉正在创建标志
                            DefaultSingletonBeanRegistry#afterSingletonCreation
                            // 加入singletonObjects
                            DefaultSingletonBeanRegistry#addSingleton
            smartSingleton.afterSingletonsInstantiated

